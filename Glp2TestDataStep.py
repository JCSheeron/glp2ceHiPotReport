#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Glp2TestDataStep.py
#
# This object holds test step data that originates from a csv file generated by
# a Schleich tester. The csv file is actually uses a ";" as a seperator character,
# and presumably is opened, imported, and then passed to a GlpTestData object.  The
# GlpTestData object breaks the test data into steps, presumably using this object
# to store the steps.
#
# Stored in this object is a header row, and the test step details for a single
# step.  These are both lists, with the index of the header list "lining up" with
# the index of the test step details
#
# The data normally has the format:
# header:   [headercol0, headercol1, headercol2, ...]
# data:     [col0val, col1val, col2val, ...]
# Included in the data is the graph data, which itself is a (non-python) list of
# data, delimited by the "|" character.
#
# NOTE: The data file contains the header info in the first row.  This object
# assumes the data passed to the constructor does not have header info, and the
# header info is instead passed as the data paramater. When a batch of steps are
# associated with a test and stored, the heaer info is repeated in each one.  This
# is a bit redundant and wasteful, but I chose this so an individual step can
# stand alone and contain enough information so that the step details can be
# interpreted.
#
# Tuples are used to store the header and step details, since tuples are
# immutable.
#
# The index passed to the constructor are defaulted to the correct zero based column
# numbers. Paramters are used so the values can be changed if needed.
#
# imports
#

class Glp2TestDataStep(object):
    def __init__(self, data=None, header=None, testStepGuidIdx=1, stepNumberIdx=2,
            timestampIdx=30, deviceNumberIdx=31, graphDataIdx=76):
        # The data expected is a tuple, list, or something convertable to a
        # tuple shat has an entire row of data from a test data file.  The
        # indexes are the normal column counts, starting at zero.
        #
        # Set the header. Do this first so it is available later if needed.
        if header is not None: # header specified
            try:
                # header is specified, but it must be convertable to a tuple.
                self._dataHeader = tuple(header)
            except ValueError as ve:
                print('Value Error: The header parameter must be a tuple, or something \
convertable to a tuple. This generally means it must be something iteratable. \
Header not changed.')
                print(ve)
                self._dataHeader = None
        else: # no header specified
            self._dataHeader = None
        # set up the data
        if data is not None: # data provided
            # make sure the data is convertable to a tuple. If not, report an
            # error -- a tuple is immutable, so an empty one isn't very useful.
            try:
                self._rawData=tuple(data)
                # if we get here, we should have a tuple with something in it
                # Assume it is a multi element tuple, with each element containing
                # the details of a test step.
            except ValueError as ve:
                print('Value Error: The data parameter must be a tuple or something \
convertalbe to a tuple. This generally means it must be something iteratable. \
No step information captured.')
                print(ve)
                self._rawData = None
        else: # no data provided
            self._rawData = None

        self._testStepGuidIdx = testStepGuidIdx
        self._stepNumberIdx = stepNumberIdx
        self._timestampIdx = timestampIdx
        self._deviceNumberIdx = deviceNumberIdx
        self._graphDataIdx = graphDataIdx

    def __repr__(self):
        outputMsg=  '{:16} {}\n'.format('Test Step GUID: ', self.testStepGuid)
        outputMsg+= '{:16} {}\n'.format('Test Step Number:', self.stepNumber)
        outputMsg+= '{:16} {}\n'.format('Test Step Timestamp: ', self.testTimestamp)
        outputMsg+= '{:16} {}\n'.format('Test Step Device Number: ', self.deviceNumber)

#        # data - may include header info also
#        if self._dataHeader is not None and self._rawData is not None:
#            # data and header info avail -- include header info
#            outputMsg+= '{:16} \n'.format('Test Data: ')
#            for idx, heading in enumerate(self._dataHeader):
#                for value in self._rawData:
#                    outputMsg+= '  {:4}-{:4<}: {}\n'.format(idx, heading, value)
#        elif self._dataHeader is None and self._rawData is not None:
#            # data but no header info
#            for idx, value in enumerate(self._rawData):
#                outputMsg+= '  {:4}: {}\n'.format(idx, value)
#        else:
#            # no data stored!!
#            outputMsg+= '  No Data\n'

        return(outputMsg)

    # properties
    @property
    def testStepGuid(self):
        # get the value from the raw data if the data is present
        if self._rawData is not None and self._testStepGuidIdx + 1 <= len(self._rawData):
            return self._rawData[self._testStepGuidIdx]
        else:
            return None

    @property
    def stepNumber(self):
        # get the value from the raw data if the data is present
        if self._rawData is not None and self._stepNumberIdx + 1 <= len(self._rawData):
            return self._rawData[self._stepNumberIdx]
        else:
            return None

    @property
    def testTimestamp(self):
        # get the value from the raw data if the data is present
        if self._rawData is not None and self._timestampIdx + 1 <= len(self._rawData):
            return self._rawData[self._timestampIdx]
        else:
            return None

    @property
    def deviceNumber(self):
        # get the value from the raw data if the data is present
        if self._rawData is not None and self._deviceNumberIdx + 1 <= len(self._rawData):
            return self._rawData[self._deviceNumberIdx]
        else:
            return None

    @property
    def graphData(self, step=1):
        # steps start at 1
        if self._rawData is not None and step >= 1 and step <= len(self._rawData):
            # there is raw data and the step is within range (within the width of a row)
            if self._graphDataIdx + 1 <= len(self._rawData[step - 1]):
                # the index is within range
                return self._rawData[step - 1][self._graphDataIdx]
            else: # index out of range
                return None
        else: # no data or step out of range
            return None

    @property
    def len(self):
        return len(self._rawData)

    @property
    def header(self):
        return (self._dataHeader)

    @header.setter
    def header(self, headerData):
        if headerData is not None:
            try:
                # header is specified, but it must be convertable to a tuple.
                self._dataHeader = tuple(headerData)
            except ValueError as ve:
                print('Value Error: The header parameter must be a tuple, or something \
convertable to a tuple. This generally means it must be something iteratable. \
Header not changed.')
                print(ve)
        else: # nothing specified for header
            self._dataHeader = None

    @property
    def data(self):
        return self._rawData

    @data.setter
    def data(self, data):
        if data is not None: # data provided
            # make sure the data is convertable to a tuple. If not, report an
            # error -- a tuple is immutable, so an empty one isn't very useful.
            try:
                self._rawData=tuple(data)
                # if we get here, we should have a tuple with something in it
                # Assume it is a multi element tuple, with each element containing
                # the details of a test step.
            except ValueError as ve:
                print('Value Error: The data parameter must be a tuple or something \
convertalbe to a tuple. This generally means it must be something iteratable. \
Data not changed.')
                print(ve)
        else: # no data provided
            self._rawData = None

